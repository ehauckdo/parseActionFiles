#! /usr/bin/env python
# -*- coding: utf-8 -*-
from __future__ import print_function
import os
import glob
import numpy
import sys
from prettytable import PrettyTable

singleplayer_games = ["aliens", "angelsdemons", "assemblyline", "avoidgeorge", "bait", 
                      "beltmanager", "blacksmoke", "boloadventures", "bomber", "bomberman", 
                      "boulderchase", "boulderdash", "brainman", "butterflies", "cakybaky",
                      "camelRace", "catapults", "chainreaction", "chase", "chipschallenge" 
                      "clusters", "colourescape", "chopper", "cookmepasta", "cops", 
                      "crossfire", "defem", "defender", "digdug", "dungeon", 
                      "eighthpassenger", "eggomania", "enemycitadel", "escape", "factorymanager", 
                      "firecaster", "fireman", "firestorms", "freeway", "frogs", 
                      "garbagecollector", "gymkhana", "hungrybirds", "iceandfire", "ikaruga", 
                      "infection", "intersection", "islands", "jaws", "killBillVol1", 
                      "labyrinth", "labyrinthdual", "lasers", "lasers2", "lemmings", 
                      "missilecommand", "modality", "overload", "pacman", "painter", 
                      "pokemon", "plants", "plaqueattack", "portals", "raceBet", 
                      "raceBet2", "realportals", "realsokoban", "rivers", "roadfighter", 
                      "roguelike", "run", "seaquest", "sheriff", "shipwreck", 
                      "sokoban", "solarfox", "superman", "surround", "survivezombies", 
                      "tercio", "thecitadel", "thesnowman", "waitforbreakfast", "watergame", 
                      "waves", "whackamole", "wildgunman", "witnessprotection", "wrapsokoban", 
                      "zelda", "zenpuzzle"]

multiplayer_games = ["accelerator", "akkaarrh", "asteroids", "beekeeper", "bombergirl", 
                    "breedingdragons", "captureflag", "competesokoban", "copsNrobbers", "donkeykong", 
                    "dragonattack", "drowning", "egghunt", "fatty", "firetruck", 
                    "football", "ghostbusters", "gotcha", "isawsanta", "klax", 
                    "mimic", "minesweeper", "minions", "oopsbrokeit", "reflection", 
                    "rivalry", "romeoNjuliet", "samaritan", "sokoban", "steeplechase", 
                    "teamescape", "thebridge", "trainride", "treasuremap", "tron", 
                    "upgrade-x", "uphigh", "warzone", "watchout", "wheelme"]

class GameRecord:
    def __init__(self, name):
        self.name = name
        self.victories = 0
        self.victories_p2 = 0
        self.disqualified = 0
        self.disqualified_p2 = 0
        self.scores = []
        self.scores_p2 = []
        self.total_games = 0

    def __str__(self):
        return self.name, self.victories, numpy.mean(self.scores), numpy.std(self.scores)
    
    def getData(self):
        return [self.name, self.victories*100/self.total_games, "{0:.2f}".format(numpy.mean(self.scores))+" ± {0:.2f}".format(numpy.std(self.scores)), 
                     numpy.min(self.scores), numpy.max(self.scores),
                    self.disqualified]
    def getDataMulti(self):
        return [self.name, self.victories*100/self.total_games, self.victories_p2*100/self.total_games, "{0:.2f}".format(numpy.mean(self.scores))+" ± {0:.2f}".format(numpy.std(self.scores)), 
                    "{0:.2f}".format(numpy.mean(self.scores_p2))+" ± {0:.2f}".format(numpy.std(self.scores_p2)),numpy.min(self.scores), numpy.max(self.scores),
                    self.disqualified]

def parseGameName(string):
    filename = string.split("/")[-1]
    words = filename.split("_")
    for word in words:
        if word in singleplayer_games or word in multiplayer_games:
            return word
    print(filename)
    print(""""Corrupted file name or unindetified game found.\n
          Check if all file names contain valid game names in the GVG-AI framework.""")
    sys.exit()

def main(args):

    if len(args) < 1:
        print("usage: ./parseActionFiles [-m] directoryName")
        sys.exit(1)

    path = os.getcwd()+"/"+args[0]+"/*.txt"

    if args[0] == "-m":
        path = os.getcwd()+"/"+args[1]+"/*.txt"
        multi = True
    else:
        multi = False

    files_list = glob.glob(path)

    replayRecords = {}
 
    # for every record file
    for file in files_list:
        with open(file, "r") as ins:
            # get name of the game
            game_name = parseGameName(file)

            # if needed create a new list of records for this game
            if game_name not in replayRecords.keys():
                replayRecords[game_name] = GameRecord(game_name)

            if multi == False:
                for line in ins:
                    line = line.strip().split(" ")
                    victory = line[1]
                    score = line[2] 
                    if float(score) == -1000:
                        replayRecords[game_name].disqualified += 1
                    else:
                        replayRecords[game_name].scores.append(float(score))
                        replayRecords[game_name].victories += int(victory)
                        replayRecords[game_name].total_games += 1
                    break
            else:
                count = 0
                for line in ins:
                    if count == 1:
                        line = line.strip().split(" ")
                        score = line[0]
                        if float(score) == -1000:
                            replayRecords[game_name].disqualified += 1
                        else:
                            replayRecords[game_name].scores.append(float(score))
                        score_p2 = line[1]
                        if float(score_p2) == -1000:
                            replayRecords[game_name].disqualified_p2 += 1
                        else:
                            replayRecords[game_name].scores_p2.append(float(score_p2))
                    if count == 2:
                        line = line.strip().split(" ")
                        victory = line[0]
                        victory_p2 = line[1]
                        replayRecords[game_name].victories += int(victory)
                        replayRecords[game_name].victories_p2 += int(victory_p2)
                        replayRecords[game_name].total_games += 1
                    
                    count = count +1 
                    
                    if count == 3:
                        break

    if multi == False:
        t = PrettyTable(['Name', 'Victories%', 'AvgScore', 'MinScore', 'MaxScore', "Disqualified"])

        # iterate through the records of every game
        for game in sorted(replayRecords.keys()):
            t.add_row(replayRecords[game].getData())
    else:
        t = PrettyTable(['Name', 'Victories%_P1', 'Victories%_P2', 'AvgScore_P1', 'AvgScore_P2','MinScore', 'MaxScore', "Disqualified"])

        # iterate through the records of every game
        for game in sorted(replayRecords.keys()):
            t.add_row(replayRecords[game].getDataMulti())

    print(t)

if __name__ == '__main__':
    main(sys.argv[1:])
