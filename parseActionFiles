#! /usr/bin/env python
# -*- coding: utf-8 -*-
from __future__ import print_function
import os
import glob
import numpy
import sys
import getopt
from prettytable import PrettyTable

singleplayer_games = ["aliens", "angelsdemons", "assemblyline", "avoidgeorge", "bait", 
                      "beltmanager", "blacksmoke", "boloadventures", "bomber", "bomberman", 
                      "boulderchase", "boulderdash", "brainman", "butterflies", "cakybaky",
                      "camelRace", "catapults", "chainreaction", "chase", "chipschallenge" 
                      "clusters", "colourescape", "chopper", "cookmepasta", "cops", 
                      "crossfire", "defem", "defender", "digdug", "dungeon", 
                      "eighthpassenger", "eggomania", "enemycitadel", "escape", "factorymanager", 
                      "firecaster", "fireman", "firestorms", "freeway", "frogs", 
                      "garbagecollector", "gymkhana", "hungrybirds", "iceandfire", "ikaruga", 
                      "infection", "intersection", "islands", "jaws", "killBillVol1", 
                      "labyrinth", "labyrinthdual", "lasers", "lasers2", "lemmings", 
                      "missilecommand", "modality", "overload", "pacman", "painter", 
                      "pokemon", "plants", "plaqueattack", "portals", "raceBet", 
                      "raceBet2", "realportals", "realsokoban", "rivers", "roadfighter", 
                      "roguelike", "run", "seaquest", "sheriff", "shipwreck", 
                      "sokoban", "solarfox", "superman", "surround", "survivezombies", 
                      "tercio", "thecitadel", "thesnowman", "waitforbreakfast", "watergame", 
                      "waves", "whackamole", "wildgunman", "witnessprotection", "wrapsokoban", 
                      "zelda", "zenpuzzle"]

multiplayer_games = ["accelerator", "akkaarrh", "asteroids", "beekeeper", "bombergirl", 
                    "breedingdragons", "captureflag", "competesokoban", "copsNrobbers", "donkeykong", 
                    "dragonattack", "drowning", "egghunt", "fatty", "firetruck", 
                    "football", "ghostbusters", "gotcha", "isawsanta", "klax", 
                    "mimic", "minesweeper", "minions", "oopsbrokeit", "reflection", 
                    "rivalry", "romeoNjuliet", "samaritan", "sokoban", "steeplechase", 
                    "teamescape", "thebridge", "trainride", "treasuremap", "tron", 
                    "upgrade-x", "uphigh", "warzone", "watchout", "wheelme"]

class GameRecord:
    def __init__(self, name):
        self.name = name
        self.victories = 0
        self.disqualified = 0
        self.scores = []
        self.total_games = 0

    def __str__(self):
        return self.name, self.victories, numpy.mean(self.scores), numpy.std(self.scores)
    
    def getData(self):
        return [self.name, self.getVictoriesPercentage(), self.getAverageScore(), 
                numpy.min(self.scores), numpy.max(self.scores), self.disqualified]

    def getVictoriesPercentage(self):
        return self.victories*100/self.total_games
    
    def getAverageScore(self):
        return "{0:.2f}".format(numpy.mean(self.scores))+" Â± {0:.2f}".format(numpy.std(self.scores))

def usage():
    print("Corrupted file name or unindetified game found.")
    print("Check if all file names contain valid game names in the GVG-AI framework.")
    sys.exit()

def parseGameName(string):
    filename = string.split("/")[-1]
    words = filename.split("_")
    for word in words:
        if word in singleplayer_games or word in multiplayer_games:
            return word
    print(filename)
    usage()

def parsePlayers(string, multiplayer):
    
    filename = string.split("/")[-1]
    player1 = filename.split("_")[0]
    if multiplayer is True:
        player2  = filename.split("/")[-1].split("_")[1]
    else:
        player2 = None
    return player1, player2

def addGameRecord(controllers, player, game_name):

    if player == None:
        return
    if player not in controllers.keys():
        controllers[player] = {} 
    if game_name not in controllers[player].keys():
        controllers[player][game_name] = GameRecord(game_name)

def computeScore(controllers, player, game_name, victory, score, ignoreDisqualified):

    if float(score) == -1000:
        controllers[player][game_name].disqualified += 1
        if ignoreDisqualified != True:
            controllers[player][game_name].scores.append(float(score))
            controllers[player][game_name].total_games += 1
    else:
        controllers[player][game_name].scores.append(float(score))
        controllers[player][game_name].victories += int(victory)
        controllers[player][game_name].total_games += 1

def main(args):

    if len(args) < 1:
        usage()
 
    isMultiplayer = False
    ignoreDisqualified = False
    compareControllers = False 
    controllers = {}
    games = set()

    try:
        options, folders = getopt.getopt(args, "mic")
    except getopt.GetoptError:
        usage()
 
    for opt, value in options:
        if opt == "-m":
            isMultiplayer = True
        if opt == "-i":
            ignoreDisqualified = True
        if opt == "-c":
            compareControllers = True

    for folder in folders: 
        path = os.getcwd()+"/"+folder+"/*.txt"
        files_list = glob.glob(path)

        # for every record file
        for file in files_list:
            with open(file, "r") as ins:
                # get name of the game
                game_name = parseGameName(file)
                games.add(game_name)
                player1, player2 = parsePlayers(file, isMultiplayer)
                addGameRecord(controllers, player1, game_name)     
                addGameRecord(controllers, player2, game_name)     
                
                if isMultiplayer == False:
                    for line in ins:
                        data = line.strip().split(" ")
                        victory = data[1]
                        score = data[2]
                        computeScore(controllers, player1, game_name, victory, score, ignoreDisqualified) 
                        break
                else:
                    for line_index, line in enumerate(ins):
                        if line_index == 1:
                            line = line.strip().split(" ")
                            score = line[0]
                            score_p2 = line[1]
                        if line_index == 2:
                            line = line.strip().split(" ")
                            victory = line[0]
                            victory_p2 = line[1]
                            computeScore(controllers, player1, game_name, victory, score, ignoreDisqualified)
                            computeScore(controllers, player2, game_name, victory_p2, score_p2, ignoreDisqualified)
                        if line_index == 3:
                            break

    if compareControllers != True:
        for c in controllers.keys():
            print(c)
            t = PrettyTable(['Name', 'Victories%', 'AvgScore', 'MinScore', 'MaxScore', "Disqualified"])
            for game in sorted(controllers[c].keys()):
                t.add_row(controllers[c][game].getData())
            print(t)
    else:
        columns = ['Name']
        columns.extend(sorted(controllers.keys()))
        t = PrettyTable(columns)
        for game in games:
            row = [game]
            for c in sorted(controllers.keys()):
               record = ' {0: >3}%'.format(str(controllers[c][game].getVictoriesPercentage()))
               record += "   {0: ^19}".format((("("+str(controllers[c][game].getAverageScore()+")"))))
               row.append(record)
            t.add_row(row)
        print(t)              
     

if __name__ == '__main__':
    main(sys.argv[1:])
